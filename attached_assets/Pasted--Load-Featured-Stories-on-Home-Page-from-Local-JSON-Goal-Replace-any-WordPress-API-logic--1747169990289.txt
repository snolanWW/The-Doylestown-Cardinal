## Load Featured Stories on Home Page from Local JSON

### üîß Goal

Replace any WordPress API logic in the Home page‚Äôs featured stories section with logic that:

1. Reads from your local `articles.json` file (generated from `public/data/articles/*.json`).
2. Filters or slices that data to show "featured" articles.
3. Keeps layout and interactivity the same.

---

### ‚ú≥Ô∏è Step 1: Update the Home Page‚Äôs Featured Section Logic

Wherever the current logic loads featured posts, **replace it with this**:

```tsx
import { useEffect, useState } from 'react';

interface Article {
  id: number;
  slug: string;
  title: string;
  excerpt: string;
  category: string;
  author: string;
  date: string;
  image: string;
  tags: string[];
}

export default function FeaturedStories() {
  const [articles, setArticles] = useState<Article[]>([]);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const loadFeatured = async () => {
      try {
        const res = await fetch('/data/articles.json');
        if (!res.ok) throw new Error("Failed to load featured articles.");
        const data = await res.json();

        // Example logic: take latest 4 articles (customize this!)
        const featured = data
          .sort((a: Article, b: Article) => new Date(b.date).getTime() - new Date(a.date).getTime())
          .slice(0, 4);

        setArticles(featured);
      } catch (err) {
        console.error(err);
        setError("Could not load featured stories.");
      }
    };

    loadFeatured();
  }, []);
```

---

### ‚ú≥Ô∏è Step 2: Render Featured Articles

In your JSX return:

```tsx
<div className="grid md:grid-cols-2 gap-6">
  {articles.map((article) => (
    <div key={article.id} className="border rounded-lg overflow-hidden">
      <img
        src={article.image}
        alt={article.title}
        className="w-full h-48 object-cover"
      />
      <div className="p-4">
        <span className={`inline-block text-white text-xs px-2 py-1 rounded mb-2 ${
          article.category === 'Live' ? 'bg-cardinal-red' : 'bg-gray-500'
        }`}>
          {article.category}
        </span>
        <h3 className="text-lg font-bold mb-2">{article.title}</h3>
        <p className="text-sm text-gray-700 line-clamp-3">{article.excerpt}</p>
      </div>
    </div>
  ))}
</div>
```

---

### ‚úÖ Customizing ‚ÄúFeatured‚Äù Selection

You have 3 main options:

1. **Latest 4 articles** (default)
2. **Manually flag articles as featured** via a `featured: true` property in their `.json`
3. **Filter by category or tag**, e.g.:

```ts
const featured = data.filter(a => a.tags.includes('featured'));
```

Let me know if you'd like help adding the `featured` flag to your article generation script.
