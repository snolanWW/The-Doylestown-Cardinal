Optimize the Articles page to reduce load time when fetching posts from the WordPress API by implementing pagination, data limiting, and caching.

---

### ✅ Requirements

1. **Implement pagination or “Load More”**

   * Update the API call:

     ```js
     /wp-json/wp/v2/posts?_embed=true&per_page=10&page=1
     ```
   * Load only **10 articles** on the first page.
   * Add a **“Load More Articles”** button that:

     * Increments the page number.
     * Appends new articles to the existing list.

---

2. **Limit the data being pulled**

   * Only map the fields you need:

     * `id`, `slug`, `title.rendered`, `excerpt.rendered`, `date`, `author name`, `featured image`.
   * Avoid storing large unused fields or deep nested objects.

---

3. **Use client-side caching**

   * Save the articles array to `localStorage` or `sessionStorage` after the first successful load.
   * On page load:

     * Check if cached data exists.
     * If yes, display it immediately while fetching fresh data in the background.

---

4. **Show loading indicators**

   * Display a **spinner** or **skeleton cards** while fetching articles.
   * Example:

     ```js
     if (isLoading) return <div>Loading articles...</div>;
     ```

---

5. **Optimize images**

   * Use the smallest available image size from WordPress (`thumbnail` or `medium`), not the full-size original.
   * Example:

     ```js
     post._embedded['wp:featuredmedia'][0].media_details.sizes.thumbnail.source_url
     ```

---

### ✅ Final check

✔ Initial load pulls only 10 articles.
✔ “Load More” button works and appends articles.
✔ Images are light and optimized.
✔ Articles are cached locally.
✔ Loading indicators show during fetch.

---

### ✅ Example `Load More` snippet

```js
const [page, setPage] = useState(1);

function loadMoreArticles() {
  setPage(prevPage => prevPage + 1);
}

useEffect(() => {
  fetch(`https://doylestowncardinal.com/wp-json/wp/v2/posts?_embed=true&per_page=10&page=${page}`)
    .then(response => response.json())
    .then(data => {
      const newArticles = mapData(data); // your existing mapping function
      setArticles(prev => [...prev, ...newArticles]);
    });
}, [page]);
```

---
